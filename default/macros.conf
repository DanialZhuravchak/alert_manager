[all_alerts]
definition = tstats values(all_alerts.alert) as alert values(all_alerts.label) as alert values(all_alerts.app) as app values(all_alerts.event_search) as event_search values(all_alerts.search) as search values(all_alerts.severity) as severity values(all_alerts.earliest) as earliest values(all_alerts.latest) as latest count from datamodel="alert_manager" where nodename="all_alerts" by all_alerts.job_id,all_alerts.incident_id,all_alerts.result_id,_time |rename all_alerts.incident_id as incident_id, all_alerts.job_id as job_id, all_alerts.result_id as result_id| sort - _time | lookup incidents job_id, result_id OUTPUT |lookup alert_status status OUTPUT status_description |makemv delim=" " tags | lookup alert_urgencies severity, priority OUTPUT urgency 
iseval = 0

[all_alerts_single_trend(2)]
args = earliest, latest
definition = tstats values(all_alerts.alert) as alert values(all_alerts.label) as alert values(all_alerts.severity) as severity count from datamodel="alert_manager" where nodename="all_alerts" earliest="$earliest$" latest="$latest$" by all_alerts.incident_id |rename all_alerts.incident_id as incident_id | lookup incidents incident_id OUTPUT priority | fillnull value=unknown priority | lookup alert_urgencies severity, priority OUTPUT urgency | fields urgency
iseval = 0

[all_alerts_pivot]
definition = pivot alert_manager all_alerts SPLITROW _time PERIOD auto SPLITROW label AS alert SPLITROW app SPLITROW incident_id  SPLITROW event_search SPLITROW search  SPLITROW severity SPLITROW earliest SPLITROW latest ROWSUMMARY 0 COLSUMMARY 0 NUMCOLS 0 SHOWOTHER 1 | sort - _time | lookup incidents incident_id OUTPUT |lookup alert_settings alert OUTPUT category, subcategory, priority |lookup alert_urgencies severity, priority OUTPUT urgency
iseval = 0

[incident_details(1)]
args = incident_id
definition = eventtype=incident_change incident_id="$incident_id$" |eval previous_value=coalesce(previous_status, previous_owner, previous_priority) | eval attribute=case(isnotnull(owner),"owner",isnotnull(priority),"priority",isnotnull(status),"status") | eval attribute_val=case(isnotnull(owner),owner,isnotnull(priority),priority,isnotnull(status),status) |eval details=case(action="auto_previous_resolve","Incident resolved by system (because of a new incident)",action="auto_ttl_resolve","Incident resolved by system (TTL reached)",action="create","Incident created",action="change",attribute + " has been changed from '" + previous_value + "' to '" + attribute_val+"'") | table _time, user, action, details, comment
iseval = 0
